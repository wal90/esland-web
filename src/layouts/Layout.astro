---
import Header from '../components/Header.astro';
import '@fontsource-variable/onest'

interface Props {
	description: string;
	title: string;
}

const { description, title } = Astro.props;
const { currentLocale } = Astro
---

<!doctype html>
<html lang={currentLocale}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content=description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
	</head>
	<body>
		<Header />
		<slot />
	</body>
</html>
<style is:global>
	:root {
		color-scheme: dark;
	}
	html {
		font-family: 'Onest Variable', system-ui, sans-serif;
		background: #151a36;
	}
	p {
		color: rgba(255, 255, 255, 0.9);
		line-height: 1.4;
		margin-bottom: 1em;
		font-weight: 100;
		font-size: 1em;
		letter-spacing: .5px;
	}
	p strong {
		color: white;
		font-weight: 700;
	}

	#header-nav {
		animation: blur linear both ;
		animation-timeline: scroll();
		animation-range: 0 500px;

	}

	@keyframes blur {
		to {
			box-shadow: 
			0px 5px 50px -5px rgba(0, 0, 0, 0.1),
			0px 0px 0 1px rgba(0, 0, 0, 0.3);
			background: rgba(0, 0, 0, 0.3);
			backdrop-filter: blur(10px);
		}
	}

	/* currentColor: toma el color actual, el que esta por defecto */
	/* ANOTACIONES CSS... 
	-Reutilizar estilos
	-Tener pocos ID
	-Font family se hereda
	-Inherit: quiere decir que hereda
	-Initial:; es el valor inicial
	-PseudoClase son situaciones de los elementos de html es un :hover
	-Outline no da ningun salto, contorno que se dibuja encima
	-Active: cuando un elemento esta activo, cuando se hace click
	-Firts-child pseudoclase para algo puntual ejemplo el primer item de un <li>
	-Last-child seria el último
	-Selectores combinados cuando tengo mas de una clase 
	- ul > li significa q solo aplique a lo del primer nivel, los que son hijos directos
	- p ~ span es el de el hermano siguiente, el que sigue al primer nivel
	- p + span para que sea el hermano directo, es mas estricto que el anterior
	-NIVELES (especificidad)
		IDs
		Clases, atributos y pseudo-clases
		Elementos y pseudo-elementos
	- style='color: orange' es un estilo en linea y tiene mayor especificidad, no usarlo muchas veces
	- Los estilos del navegador son los que me menos nivel tienen, los del usuario estan por encima (cuando se utiliza la consola)
	- !important : se saltea cualquier tipo de especificidad, no usarlo muchas veces
	- (%) es una unidad relativa del contenedor padre
	- vh es el view hight 50hv seria el 50% de la pantalla, la altura
	- vw , lo mismo que lo anterior pero con el ancho
	- POR DEFECTO EL NAVEGADOR TIENE 8px DE MARGEN, se soluciona con margin: 0
	- El DIV y SECTION funciona en bloque, hace un salto de linea (block)
	- EN LINEA no tiene ni ancho, ni alto (inline)
	- El padding y el border afectan al tamaño de la caja, determinan el ancho y el alto
	- El margin no afecta el ancho y alto de la caja
	- Box-sizing: content-box, el ancho y el alto es el contenido, hay q sumarle el padding y el border
	- Box-sizing: border-box, padding y border incorporado a lo que ocupa la caja - del borde hacia adentro
	- overflow: visible, es que lo que esta desbordando esta visible 
	- overflow: hidden, el contenido que desborda lo recorta y no se puede ver
	- overflow: scroll, recorta el contenido pero se puede ver con scroll
	- overflow: auto, funciona de manera automatica, el navegador sabe lo que hace
	- text-overflow: ellipsis, el desvordamiento del texto termina con un elipsis (...)
	- text-overflow: clip, recorta el texto directamente

	- Los elementos se posicionan de manera ESTATICA (por defecto) position: static
	- Position: ABSOLUTE, es la posicion absoluta( se salta cualquier control), va con el top, bottom, left o rigth, respecto a algo, en un principio respecto al documento... siempre busca al padre osea cual es el elemento relativo.. cuando no encuentra ninguno el padre es el documento
	- Position: RELATIVE.. es un punto relativo para que cualquiera de nuestros hijos lo tome como referente (es el padre...)
	- si POSITION ABSOLUTE tiene right, top, bottom y left 0 + margin AUTO se centra (para centrar un modal)
	- INSET: 0.. es una forma corta de hacer lo anterior (centrar algo) + margin AUTO

	- POSITION FIXED es parecido al absolute, pero se queda fijo en pantalla.. es relativo a la pantalla cuando ponemos top, rigth, bottom, left. No sirve previamente poner position relative
	- POSITION STICKY se queda pegado al contenedor en donde esta, va a tener en cuanta lo RELATIVE
	- Z-INDEX prioridad de apilación, ya que es como una capa tridimensional, tiene que tener un contexto de apilamiento es decir hay q usar la posicion relativa (no usarlo tanto)
	- CONTEXTO DE APILAMIENTO se crea con position relative

	- DISPLAY BLOCK ---> los elementos aparecen en bloque, hay salto de linea (le afecta el ancho y el alto del elemento)
	- DISPLAY INLINE ---> se comporta como si fuese un texto, uno en linea con el otro, no hay salto de linea
	- DISPLAY FLEX ---> se utiliza en el CONTENEDOR, no en el hijo. Determina una dirección, que es una fila 
	- FLEX DIRECTION: ROW ---> es en fila
	- FLEX DIRECTION: COLUMN ---> direcciona los elementos en columna
	- FLEX trabaja de un solo eje (filas o columnas)
	- GRID ES UNA CUADRICULA, es la es la diferencia con flex. Se trabaja bidimensionalemnte
	- FLEX DIRECTION: ROW-REVERSE ---> es la fila es sentido contrario ----> lo mismo con COLUMN-REVERSE (la columna en forma invertida)
	- DIRECTION rtl ---> rigth to left
	- WRITING-MODE: vertical-lr (invierte de manera vertical, dando vuelta la cabeza jaja)

	- FLEX-WRAP por defecto es nowrap, ajusta los elementos a una misma linea, que entre en la dimension que tiene.. no hace salto de linea 
	- FLEX-WRAP: WRAP hace el salto de linea ---> manera abraviada FLEW-FLOW: ROW NOWRAP
	
	---- estos son valores iniciales---- esto va en los hijos
	- FLEX-GROW: 0, lo elemntos no crecen
	- FLEX-SHRINk: 1, los elementos pueden reducir su tamaño a un tamaño mas pequeño que su flex-basis
	- FLEX-BASIS: AUTO, los elementos tienen un tamaño base en auto --- en 0 todos tienen el mismo ancho ---> la forma abreviada es hacer FLEX:1
	- FLEX: AUTO el contenido se ajusta al contenedor 
	- FLEX: 4, 2, 1 el numero hace referencia de cuanto tiene que ocupar respecto del padre, la proporcion que cada uno va a ocupar
	- ORDER: (NUMERO) pongo el numero del orden en que los hijos se tienen que mostrar en el contenedor, lo ordena segun el numero que tengas, del mas chico al mas grande

	- POSICIONAR ELEMENTOS EN FLEXBOX con JUSTIFY-CONTENT
	- Ejes cruzados:
	- Eje principal: FELX-DIRECTION (COLUMN, ROW)
	- JUSTIFY CONTENTE CENTER
	- JUSTIFY CONTENTE: SPACE-AROUND deja el mismo tamaño de distancia, es el doble de los espacios de los laterales
	- JUSTIFY CONTENTE: SPACE-BETWEEN es espacio entre los elemetos 
	- JUSTIFY CONTENTE: SPACE-EVENLY es parecido al space-aroun, la diferencia es que deja la misma distancia entre los laterales osea los extremos
	- FLEX-START posiciona todo al inicio de la fila
	- FLEX-END posiciona todo al final de la fila
	- GAP: es la separacion de los elementos de manera especifica en pixeles, porcentaje
	- ALIGN-CONTENT: CENTER, centra la columna-- cuando hay mas de una linea (no se ultiliza mucho)
	- ALIGN- ITEMS: CENTER centra todo a nivel contenedor, osea lo centra el el centro del contenedor, como se alinean en el eje cruzado
	- SE UTILIZA MAS EL justify-content: center (eje principal) y align-items:center (eje cruzado) ---> para centrar contenido
	- ALIGN-SELF: FLEX-END, FLEX-START para que se alinea como quiere, diferente al padre

	- FLEX unidireccional ---> filas o columnas -- se elije uno de los dos
	- Grid bidimensional ---> filas y columnas -- se pueden usar los dos

	- GRID ---> elementos con tamaños fijos o flexibles, los elementos se pueden posicionar en cualquier lugar de la cuadricula, se pueden poner elemtos superpuestos
	- DISPLAY: GRID para que sea una cuadricula
	- PARA TENER COLUMNAS EN LA CUADRCULA grid-template-columns: 100px 100px (serian dos columnas)
		- grid-template-columns: AUTO 100px 100px el navegador decide cual es el espácio que ocupa
		- con auto siempre va a tener mas especio el que tiene mas cosas dentro, segun el contenido
		- se pueden mezclar unidades --->  ej 50% 100px auto 10vw (tiene 4 columnas)
		- UNIDAD ESPECIAL ESPECIFICA QUE SOLO SE USA CON GRID ----> fraccion, idica el tamaño de las columnas de manera proporcional (1fr) --> es solo una columna
		- grid-template-columns: 1fr 2fr (la primera tiene una fraccion y la segunda tiene el doble de tamaño que la primera, que una sea el doble de la otra)
		- 1f ----> es el 100%







	*/ 
	
</style>
